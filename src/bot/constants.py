info_message = (
    '–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è –≤ –ú–æ—Å–∫–≤–µ.\n\n'
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /predict –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã –Ω–∞ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å—è. –ü–æ –∑–∞–ø—Ä–æ—Å—É –±–æ—Ç–∞ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –≤–≤–æ–¥–∏—Ç–µ '
    '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å.\n\n'
    '–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å, –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∞—Å –Ω–µ –≤–∞–∂–Ω–∞. '
    '–¢–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.'
)

misunderstand_message = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help'

available_commands = {
    '/start': '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
    '/info': '–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?',
    '/help': '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
    '/predict': '–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∂–∏–ª—å—è',
}

bool_map = {
    '0': '–ù–µ—Ç',
    '1': '–î–∞',
}

district_map = {'–¶–ê–û': '–¶–ê–û', '–°–ê–û': '–°–ê–û', '–ó–ê–û': '–ó–ê–û', '–ù–ê–û (–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π)': '–ù–ê–û (–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π)', 'other': '–Æ–ó–ê–û/–Æ–ê–û/–Æ–í–ê–û/–í–ê–û/–°–í–ê–û/–°–ó–ê–û'}

parking_type_map = {'ground': '–ù–∞–∑–µ–º–Ω–∞—è', 'underground': '–ü–æ–¥–∑–µ–º–Ω–∞—è'}


def get_prediction_message(data, price):
    return f"""
–í–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –º–µ—á—Ç—ã:

üè† –û–∫—Ä—É–≥: <b>{district_map[data['district']]}</b>
üöá –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ: <b>{data['nearest_underground']} –º–∏–Ω—É—Ç</b>
üõèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: <b>{data['rooms_count']}</b>
üõãÔ∏è –ú–µ–±–µ–ª—å: <b>{'–ï—Å—Ç—å' if data['has_furniture'] == 1 else '–ù–µ—Ç'}</b>
üìè –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: <b>{data['area']} –º¬≤</b>
üõãÔ∏è –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å: <b>{data['living_area']} –º¬≤</b>
üçΩÔ∏è –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏: <b>{data['kitchen_area']} –º¬≤</b>
üè¢ –≠—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞: <b>{data['floors_count']} —ç—Ç–∞–∂–µ–π</b>
‚¨ÜÔ∏è –≠—Ç–∞–∂ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã: <b>{data['floor']}</b>
üöó –¢–∏–ø –ø–∞—Ä–∫–æ–≤–∫–∏: <b>{parking_type_map[data['parking_type']]}</b>
üåá –ë–∞–ª–∫–æ–Ω: <b>{'–ï—Å—Ç—å' if data['has_balconies'] == 1 else '–ù–µ—Ç'}</b>
üõó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤: <b>{data['lifts_count']}</b>
üì¶ –ì—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç: <b>{'–ï—Å—Ç—å' if data['has_cargo_lifts'] == 1 else '–ù–µ—Ç'}</b>
üë®‚Äçüíº –ü—Ä–æ–¥–∞–≤–µ—Ü ‚Äî –∞–≥–µ–Ω—Ç: <b>{'–î–∞' if data['is_seller_agent'] == 1 else '–ù–µ—Ç'}</b>

üí∞ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} —Ä—É–±–ª–µ–π</b>
"""


def boolean_map(key: str) -> str:
    return bool_map.get(key) or '–ù–µ–≤–∞–∂–Ω–æ'


def get_start_message(user_name: str) -> str:
    return f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.'


def get_help_message() -> str:
    global available_commands
    answer_text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n'
    for cmd, description in available_commands.items():
        answer_text += cmd + ' - ' + description + '\n'
    return answer_text
